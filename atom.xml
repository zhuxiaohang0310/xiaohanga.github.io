<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-18T07:26:35.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/06/20/day02/"/>
    <id>http://yoursite.com/2019/06/20/day02/</id>
    <published>2019-06-20T03:48:54.025Z</published>
    <updated>2019-06-18T07:26:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端开发规范"><a href="#前端开发规范" class="headerlink" title="前端开发规范"></a>前端开发规范</h2><h2 id="书写一个前端开发文档"><a href="#书写一个前端开发文档" class="headerlink" title="书写一个前端开发文档"></a>书写一个前端开发文档</h2><h2 id="vue初步认识"><a href="#vue初步认识" class="headerlink" title="vue初步认识"></a>vue初步认识</h2><h3 id="前端发展历史"><a href="#前端发展历史" class="headerlink" title="前端发展历史"></a>前端发展历史</h3><p>html<br>  html [1990]—-&gt; html5 [2008.1.12]</p><p>css<br>  css 1.0 1996<br>  css 2.0 1998<br>  css 3.0 2001</p><p>EcmaScript<br>  1997年诞生<br>  2015  EcmaScript 2015<br>  2016  EcmaScript 2016          dart语言  vs  javascript</p><p>随着前端项目的逻辑越来越复杂和难以维护，那么前端这边引进了后端的架构思想（ MV* ）</p><p>M  Model      数据层<br>V  View       视图层<br>VM ViewModel  视图模型（ 业务逻辑  VM 是 由  P 改名得来的）<br>P  Presenter  提出者（ Controller 改名得来的 ）<br>C  Controller 控制器 ( 业务逻辑 )</p><p>Backbone.js  MVP    2010.10</p><p>Angular.js( 1.0 )   MVC    2010.10</p><p>Angular.ts ( 2.0 )  MVC -&gt; MVVM 2016 目前已经更新到了 Angular7 ( 也属于angular2.0 版本 )</p><p>Vue 1.0   MVVVM  2014/07</p><p>Vue 2.0   MVVM   2016/09</p><p>React 2012 不太认可前端MVC这种架构思想， 你可以将React单纯看做是MVC中V</p><p>github统计量 （ 国际使用量 ）不代表大陆地区       单位是： K</p><p>angular.js   angular.ts       vue             React  </p><p>  59.6          49.1          142              131</p><p>学习难度： Vue &lt; React &lt; Angular( 2.0 )</p><p>前端流行</p><p>  移动  web    &amp;&amp;  hybird app( 混合app )</p><p>  app<br>    1. native app ( 安卓  ios  java ME)<br>    2. webapp ( 应用在浏览器中的app )<br>    3. Hybird app ( 混合app )<br>       1. webapp 嵌入 第三方原生应用库（ 可以访问原生设备（手机） 的接口权限，比如：照相机 ）</p><h3 id="MV-的图示"><a href="#MV-的图示" class="headerlink" title="MV*的图示"></a>MV*的图示</h3><p>MVC<br>  | C改名为P<br>MVP<br>  | P更像是媒人了（ 连接 M  V 的桥梁）<br>MVVM<br>  | VM 是 由 p改名得来的  VM 和 V 的关系更加的亲密<br>  | “MVVM”:双向数据绑定，View的变动，映射在 ViewModel，反之一样</p><p>注意：<br>    我们以上的这几个框架都是： 单向数据流（ 数据由 父级 流向 子级 ）</p><h2 id="初始Vue-js"><a href="#初始Vue-js" class="headerlink" title="初始Vue.js"></a>初始Vue.js</h2><ol><li>Vue.js是尤雨溪的个人项目</li><li>Vue.js是一个MVVM框架</li><li>Vue.js也是一个javascript的渐进式框架（ 越学越难 ）</li><li>前端还有一个比较知名的MVVM的个人项目： 司徒正美  avonlon.js<h3 id="vue-js安装"><a href="#vue-js安装" class="headerlink" title="vue.js安装"></a>vue.js安装</h3></li><li>script标签引入（ cdn| 下载 ）</li><li>模块化安装  npm/cnpm/yarn  </li></ol><h2 id="文档学习"><a href="#文档学习" class="headerlink" title="文档学习"></a>文档学习</h2><ol><li>先找教程/5分钟快速上手/quick start</li><li>下载安装</li><li>基础demo</li><li>学习api和配置</li></ol><h2 id="作业："><a href="#作业：" class="headerlink" title="作业："></a>作业：</h2><ol><li>vue和其他框架对比（ 整理笔记 ）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端开发规范&quot;&gt;&lt;a href=&quot;#前端开发规范&quot; class=&quot;headerlink&quot; title=&quot;前端开发规范&quot;&gt;&lt;/a&gt;前端开发规范&lt;/h2&gt;&lt;h2 id=&quot;书写一个前端开发文档&quot;&gt;&lt;a href=&quot;#书写一个前端开发文档&quot; class=&quot;headerli
      
    
    </summary>
    
    
  </entry>
  
</feed>
